<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how to write</title>
      <link href="/2020/03/13/howtowrite/"/>
      <url>/2020/03/13/howtowrite/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> JAVA </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA JIT</title>
      <link href="/2020/03/13/jit-in-java/"/>
      <url>/2020/03/13/jit-in-java/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-JIT-笔记"><a href="#JAVA-JIT-笔记" class="headerlink" title="JAVA JIT 笔记"></a>JAVA JIT 笔记</h1><hr><h3 id="JIT-in-JRE"><a href="#JIT-in-JRE" class="headerlink" title="JIT in JRE"></a>JIT in JRE</h3><ul><li><strong>what is JIT ?</strong></li></ul><p>The Just-In-Time (JIT) compiler is a component of the Java Runtime Environment that <strong>improves the performance</strong> of Java applications at run time. Nothing in the JVM affects performance more than the compiler, and choosing a compiler is one of the first decisions made when running a Java application—whether you are a Java developer or an end-user.</p><hr><p>（JIT）编译器是Java运行时环境的一个组件，可提高运行时Java应用程序的性能。 JVM中没有什么比编译器更能影响性能，而选择编译器是运行Java应用程序时做出的首要决定之一，无论您是Java开发人员还是最终用户。</p><hr><ul><li><strong>An Overview</strong></li></ul><p>The key of java power “Write once, run everywhere” is <code>bytecode</code>. The way bytecodes get converted to the appropriate native instructions for an application has a huge impact on the speed of an application. These bytecode can be interpreted, compiled to native code or directly executed on a processor whose Instruction Set Architecture is the bytecode specification.</p><hr><p>Java功能“写一次，到处运行”的关键是<code>bytecode</code>。 将字节码转换为适用于应用程序的适当本机指令的方式对应用程序的速度有很大的影响。 这些字节码可以被解释，编译为本地代码，或者直接在指令集体系结构为字节码规范的处理器上执行。</p><hr><p>Interpreting the bytecode which is the standard implementation of the Java Virtual Machine (JVM) makes execution of programs slow. To improve performance, JIT compilers interact with the JVM at run time and compile appropriate bytecode sequences into native machine code. When using a JIT compiler, the hardware can execute the native code, as opposed to having the JVM interpret the same sequence of bytecode repeatedly and incurring the penalty of a relatively lengthy translation process. This can lead to performance gains in the execution speed, unless methods are executed less frequently. The time that a JIT compiler takes to compile the bytecode is added to the overall execution time, and could lead to a higher execution time than an interpreter for executing the bytecode if the methods that are compiled by the JIT are not invoked frequently.</p><hr><p>解释字节码是Java虚拟机（JVM）的标准实现，这会使程序的执行速度变慢。 为了提高性能，JIT编译器在运行时与JVM交互，并将适当的字节码序列编译为本地机器代码。 当使用JIT编译器时，硬件可以执行本机代码，而不是让JVM重复解释相同的字节码序列，并导致翻译过程相对冗长。 除非方法的执行频率降低，否则这可能会导致执行速度提高。 JIT编译器编译字节码所花费的时间被添加到总体执行时间中，并且如果不频繁调用JIT编译的方法，则可能导致比用于执行字节码的解释器更长的执行时间。</p><hr><p>The JIT compiler performs certain optimizations when compiling the bytecode to native code. Since the JIT compiler translates a series of bytecode into native instructions, it can perform some simple optimizations. Some of the common optimizations performed by JIT compilers are data-analysis, translation from stack operations to register operations, reduction of memory accesses by register allocation, elimination of common sub-expressions etc. The higher the degree of optimization done by a JIT compiler, the more time it spends in the execution stage. Therefore a JIT compiler cannot afford to do all the optimizations that is done by a static compiler, both because of the overhead added to the execution time and because it has only a restricted view of the program.</p><hr><p>当将字节码编译为本地代码时，JIT编译器会执行某些优化。 由于JIT编译器将一系列字节码转换为本机指令，因此它可以执行一些简单的优化。 JIT编译器执行的一些常见优化操作包括数据分析，从堆栈操作到寄存器操作的转换，通过寄存器分配减少内存访问，消除公共子表达式等。JIT编译器进行的优化程度越高， 在执行阶段花费的时间越多。 因此，JIT编译器无法承担所有静态编译器所做的优化，这不仅是因为增加了执行时间的开销，而且还因为它只对程序进行了限制。</p><hr><ul><li><strong>How does it work ?!</strong></li></ul><p>The Just-In-Time (JIT) compiler is a component of the Java Runtime Environment that improves the performance of Java applications at run time. Java programs consists of classes, which contain platform neutral bytecode that can be interpreted by a JVM on many different computer architectures. At run time, the JVM loads the class files, determines the semantics of each individual bytecode, and performs the appropriate computation. The additional processor and memory usage during interpretation means that a Java application performs more slowly than a native application. The JIT compiler helps improve the performance of Java programs by compiling bytecode into native machine code at run time.</p><p><img src="https://imgkr.cn-bj.ufileos.com/37946e31-ec07-4fb9-94c2-d8e9dcdcfd59.png" alt="JIT"></p><hr><p>（JIT）编译器是Java运行时环境的一个组件，可提高运行时Java应用程序的性能。 Java程序由类组成，这些类包含平台中立的字节码，可以由JVM在许多不同的计算机体系结构上解释。 在运行时，JVM加载类文件，确定每个单个字节码的语义，并执行适当的计算。 解释过程中额外的处理器和内存使用情况意味着Java应用程序比本地应用程序执行得更慢。 JIT编译器通过在运行时将字节码编译为本机机器代码来帮助提高Java程序的性能。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> JAVA </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在安装完一个新的Ubuntu后，我是怎么设置的</title>
      <link href="/2020/03/11/ubuntuset/"/>
      <url>/2020/03/11/ubuntuset/</url>
      
        <content type="html"><![CDATA[<h2 id="在安装完一个新的Ubuntu后，我是怎么设置的"><a href="#在安装完一个新的Ubuntu后，我是怎么设置的" class="headerlink" title="在安装完一个新的Ubuntu后，我是怎么设置的"></a>在安装完一个新的<em>Ubuntu</em>后，我是怎么设置的</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>每次安装一个新的Ubuntu的我都要大费周章，尤其是输入法，theme，icon 巴拉巴拉之类的，叫老夫实在是有点烦，这次都记下来，为下次节约时间！！！！<br>奥利给！</p></blockquote><blockquote><blockquote><p>ps：　deepin　刻录工具　Is the best</p></blockquote></blockquote><h3 id="1-chrome-浏览器"><a href="#1-chrome-浏览器" class="headerlink" title="1.chrome 浏览器"></a>1.chrome 浏览器</h3><p>google chrome 直接从官网下载</p><h3 id="2-VIM-以防需要改写文件"><a href="#2-VIM-以防需要改写文件" class="headerlink" title="2.VIM(以防需要改写文件)"></a>2.VIM(以防需要改写文件)</h3><p><code>sudo apt install vim</code></p><h3 id="3-搜狗输入法（搜狗输入法的使用体验还是及其良好的）"><a href="#3-搜狗输入法（搜狗输入法的使用体验还是及其良好的）" class="headerlink" title="3.搜狗输入法（搜狗输入法的使用体验还是及其良好的）"></a>3.搜狗输入法（搜狗输入法的使用体验还是及其良好的）</h3><blockquote><p>卸载 ibus:<code>sudo apt-get remove ibus</code></p></blockquote><hr><blockquote><p>清除ibus配置:<code>sudo apt-get purge ibus</code></p><hr><p>安装fcitx输入法框架:<code>sudo apt install fcitx-table-wbpy fcitx-config-gtk</code></p></blockquote><hr><p>打开fcitx,配置fcitx输入法</p><hr><p>logout</p><hr><p>下载搜狗输入法：<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">搜狗输入法官网</a></p><hr><p>下载.deb并安装</p><hr><p>打开Fcitx进行配置，将搜狗输入法加入</p><blockquote><blockquote><p>注意，切勿将搜狗输入法放在第一个，否则可能会出现乱码；比较好的设置是１号English()，２号搜狗，无缝切换，丝般顺滑。</p></blockquote></blockquote><h3 id="4-重头戏来了，主题设置！"><a href="#4-重头戏来了，主题设置！" class="headerlink" title="4.重头戏来了，主题设置！"></a>4.重头戏来了，主题设置！</h3><blockquote><p>应该没人能忍受ubuntu最初难看的橙色主题。所以有必要为自己的身心健康创造良好的环境。</p></blockquote><blockquote><p>ubuntu桌面主题的多样化都要归功于一个史诗级应用：ｔｗｅａｋｓ*</p></blockquote><ul><li>所以，第一步必然：<code>sudo apt install gnome-tweak-tool</code></li></ul><blockquote><p>安装完成之后，就可以到这个<a href="https://www.gnome-look.org/" target="_blank" rel="noopener">神奇的网站</a>下载你所需要的所有theme,icon,curse，wallpaper;等等文件，然后放在相应位置即可</p></blockquote><ol><li>主题存放目录：<code>/usr/share/themes</code> 或 <code>~/.themes</code></li><li>图标和鼠标存放目录：<code>/usr/share/icons</code> 或<code>~/.icons</code>（鼠标文件夹会多个文件）</li><li>字体存放目录：<code>/usr/share/fonts</code>或 <code>~/.fonts</code></li></ol><blockquote><p>管理员权限操作</p><p>然后就可以有一个美美的心情咯</p></blockquote><h3 id="5-Dash-To-Dock"><a href="#5-Dash-To-Dock" class="headerlink" title="5.Dash To Dock"></a>5.Dash To Dock</h3><blockquote><p>这个Dock插件提供了很多选项定制</p></blockquote><ul><li>到<a href="https://extensions.gnome.org/extension/307/dash-to-dock/" target="_blank" rel="noopener">gnome网站</a>弹出紫色链接，然后CLICK TO INSTALL.</li></ul><h3 id="6-备份工具"><a href="#6-备份工具" class="headerlink" title="6.备份工具"></a>6.备份工具</h3><ul><li>How to Backup Ubuntu Files and Folders</li></ul><blockquote><p>工具：<a href="https://snapcraft.io/deja-dup" target="_blank" rel="noopener">Déjà Dup Backup Tool</a></p></blockquote><p><code>sudo snap install deja-dup --classic</code>安装或者在APP STORE里搜索下载。</p><h3 id="7-pip安装"><a href="#7-pip安装" class="headerlink" title="7.pip安装"></a>7.pip安装</h3><ul><li>Pip is a package management system that simplifies installation and management of software packages written in Python such as those found in the Python Package Index (PyPI).</li></ul><p><code>sudo apt install python3-pip</code></p><h3 id="7-Ghost-Writer"><a href="#7-Ghost-Writer" class="headerlink" title="7.Ghost Writer"></a>7.Ghost Writer</h3><pre><code>sudo add-apt-repository ppa:wereturtle/ppasudo apt-get updatesudo apt-get install ghostwriter</code></pre><h3 id="8-VLC播放器（最好用的视频播放器，没有之一）"><a href="#8-VLC播放器（最好用的视频播放器，没有之一）" class="headerlink" title="8.VLC播放器（最好用的视频播放器，没有之一）"></a>8.VLC播放器（最好用的视频播放器，没有之一）</h3><ul><li><code>sudo snap install vlc</code></li></ul><h3 id="9-（号外）壁纸网站"><a href="#9-（号外）壁纸网站" class="headerlink" title="9.（号外）壁纸网站"></a>9.（号外）壁纸网站</h3><ul><li><a href="https://wallpapershome.com" target="_blank" rel="noopener">https://wallpapershome.com</a></li><li><a href="https://alpha.wallhaven.cc/" target="_blank" rel="noopener">https://alpha.wallhaven.cc/</a></li></ul><ul><li><a href="https://pixabay.com" target="_blank" rel="noopener">https://pixabay.com</a></li></ul><hr><p>参考作者网站：<a href="https://www.jianshu.com/p/7d153a484f72" target="_blank" rel="noopener">https://www.jianshu.com/p/7d153a484f72</a></p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu科学上网（ultimite）</title>
      <link href="/2020/03/10/setssr/"/>
      <url>/2020/03/10/setssr/</url>
      
        <content type="html"><![CDATA[<h3 id="ubuntu科学上网（ultimite）"><a href="#ubuntu科学上网（ultimite）" class="headerlink" title="ubuntu科学上网（ultimite）"></a>ubuntu科学上网（ultimite）</h3><hr><blockquote><p>思路：</p><blockquote><ol><li>在ubuntu安装SSR代理</li><li>ubuntu系统设置代理从本机端口映射到代理服务器</li></ol></blockquote></blockquote><h4 id="代理设置方法"><a href="#代理设置方法" class="headerlink" title="代理设置方法"></a>代理设置方法</h4><h4 id="1-写脚本安装SSR客户端-参考Charles-Xu的作品"><a href="#1-写脚本安装SSR客户端-参考Charles-Xu的作品" class="headerlink" title="1. 写脚本安装SSR客户端(参考Charles Xu的作品)"></a>1. 写脚本安装SSR客户端(参考Charles Xu的<a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr" target="_blank" rel="noopener">作品</a>)</h4><ul><li><code>cd /usr/local/bin</code>进入目录</li><li><code>sodu vim ssr.sh</code>新建脚本文件</li><li>复制大佬许的脚本，保存退出</li><li><code>chmod 775 ssr.sh</code>修改为可执行权限</li><li>如果此时运行，会缺少依赖，所以安装</li></ul><blockquote><p><code>sudo apt install python</code><br><code>sudo apt install jq</code><br><code>sudo apt install curl</code><br><code>sudo apt install proxychains4</code></p></blockquote><ul><li>安装完成后，运行<code>./ssr.sh test</code>若没错，则配置SSR</li><li><code>./ssr.sh config</code>填写代理服务器相关Jason文件信息，保存退出</li><li><code>./ssr.sh strat</code>代理服务打开</li></ul><h4 id="2-配置ubuntu系统代理"><a href="#2-配置ubuntu系统代理" class="headerlink" title="2. 配置ubuntu系统代理"></a>2. 配置ubuntu系统代理</h4><ul><li>打开 setting &gt; network &gt; network proxy</li><li>设置为 Maunal ，将 sockets hosts 设置为127.0.0.1 ,端口1080</li></ul><h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><ul><li>因为 <code>/usr/local/bin</code> 本身就在系统变量中（<code>echo $PATH</code> 查看,在 ~/.bashrc 文件中修改，一般直接加在最后一行）所以直接在 terminal 中输入 <code>ssr.sh start</code> 即可。 </li></ul><hr><h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><hr><blockquote><p>衷心感谢共享账号的好哥哥们！<br><a href="https://github.com/bannedbook/fanqiang" target="_blank" rel="noopener">https://github.com/bannedbook/fanqiang</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建SSR服务器</title>
      <link href="/2020/01/23/vspserver/"/>
      <url>/2020/01/23/vspserver/</url>
      
        <content type="html"><![CDATA[<h1 id="科学上网（自建SSR服务器）"><a href="#科学上网（自建SSR服务器）" class="headerlink" title="科学上网（自建SSR服务器）"></a>科学上网（自建SSR服务器）</h1><hr><blockquote><p>你还在为为翻墙难而困扰吗？你还在为 <code>git clone</code> 速度 20kb/s 而捶胸顿足吗？<strong>这个教程统统帮你解决！</strong></p></blockquote><ul><li><p>首先，自建ss/ssr很简单，分三步：</p></li><li><p>第一步：购买VPS服务器</p></li><li><p>第二步：一键部署VPS服务器</p></li><li><p>第三步：一键加速VPS服务器</p></li></ul><hr><h4 id="1-推荐-购买-vultr-服务器"><a href="#1-推荐-购买-vultr-服务器" class="headerlink" title="1.(推荐)购买 vultr 服务器"></a>1.(推荐)购买 <a href="https://my.vultr.com/" target="_blank" rel="noopener">vultr 服务器</a></h4><ul><li>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高，推荐5美元/月的服务器。</li><li>购买完成后，选择服务器位置，系统选择 centos 7 ，然后 deploy now</li><li>等待几分钟，服务器就配置完成。可以 ping IP 看是否被墙</li></ul><h4 id="2-配置VPS服务器端SSR"><a href="#2-配置VPS服务器端SSR" class="headerlink" title="2.配置VPS服务器端SSR"></a>2.配置VPS服务器端SSR</h4><ul><li>通过 <code>ssh root@yourip</code>命令登录，复制密码即可登录</li><li><code>yum -y install wget</code> 安装 wget</li><li><code>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</code>一键部署管理脚本</li><li>根据提示选择 1 安装，然后设置端口，密码，加密方式，协议等。</li><li>最终完成部署即可</li></ul><h4 id="3-加速VSP服务器-谷歌BBR加速"><a href="#3-加速VSP服务器-谷歌BBR加速" class="headerlink" title="3.加速VSP服务器(谷歌BBR加速)"></a>3.加速VSP服务器(谷歌BBR加速)</h4><ul><li><code>wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</code>部署脚本</li><li><code>chmod +x bbr.sh</code>赋予可执行权限</li><li><code>./bbr.sh</code>运行</li><li>等待完成重启服务器即可</li></ul><hr><blockquote><p>经过上述的三步，服务器配置就完成了；使用该服务器，则用SSR客户端，输入相应的地址密码等就好了。Ubuntu 本机端SSR的安装可以参考之前的博客。</p><p>感谢大佬们的<a href="https://blog.free-air.org/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">教学</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
            <tag> VSP </tag>
            
            <tag> Server </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B l o g 配置和踩坑</title>
      <link href="/2018/09/07/myblog/"/>
      <url>/2018/09/07/myblog/</url>
      
        <content type="html"><![CDATA[<h1 id="B-l-o-g-配置和踩坑"><a href="#B-l-o-g-配置和踩坑" class="headerlink" title="B l o g 配置和踩坑"></a>B l o g 配置和踩坑</h1><hr><blockquote><p>重要的话说三遍：</p><blockquote><p>要将 blog 源代码文件上传到 github 仓库</p><blockquote><blockquote><p>要将 blog 源代码文件上传到 github 仓库</p><blockquote><blockquote><p>要将 blog 源代码文件上传到 github 仓库</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><ul><li>本文主要分为两个部分：</li><li>1.新系统 blog 环境的配置 （ git NodeJS hexo npm ） </li><li><ol start="2"><li>blog 常用操作</li></ol></li><li><ol start="3"><li>blog 迁移</li></ol></li></ul><hr><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h3><ul><li>安装 Node.js <code>sudo apt install nodejs</code></li><li>安装 npm <code>sudo apt install npm</code></li><li>查看是否安装成功：<code>node -v</code> <code>npm -v</code></li><li>安装 git <code>sudo apt install git</code></li><li>安装 hexo</li></ul><blockquote><p>适的地方新建一个文件夹，用来存放自己的博客文件</p><p>输入 <code>sudo npm i hexo-cli -g</code> 安装 Hexo</p><p>输入 <code>hexo -v</code> 验证是否安装成功</p><p>初始化网站，输入 <code>hexo init</code> 初始化文件夹</p><p>输入 <code>npm install</code> 安装必备的组件</p><p>这样本地的网站配置也弄好啦，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦</a></p></blockquote><ul><li>之后，将 blog 源代码文件拷贝到文件夹即可。</li></ul><h3 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2.常用操作"></a>2.常用操作</h3><blockquote><p>改网页时直接刷新界面即可</p></blockquote><ul><li>hexo g 生成静态网页</li><li>hexo s 本地预览效果</li><li>hexo d 上传到 github 上</li><li>hexo new post “article title” 新建一篇文章，打开_posts 目录，多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件</li><li>theme源地址（<a href="https://github.com/YenYuHsuan/hexo-theme-beantech）" target="_blank" rel="noopener">https://github.com/YenYuHsuan/hexo-theme-beantech）</a></li></ul><h3 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h3><blockquote><p>总的来讲，站内文字部分在 blog/source/下更改，站点内容在blog/theme/matery/source。且文件结构差不多</p></blockquote><ul><li>更改音乐：/blog/source/_data/musics.json   音乐和封面存储位置：blog/public/medias/music/</li><li>友情链接：/blog/source/_data/frands,json(页面里标签方块)    文字部分：blog/source/friends/index.md</li><li>留言板（标题文字部分）/blog/source/contact/index.md</li><li>关于页面(我的简历) /blog/source/about/index.md</li><li>主页轮换的照片 /blog/theme/matery/source/medias/banner</li><li>主页右上名称 /blog/theme/matery/layout/_partial/navigation.ejs</li><li>其他深入修改，大多在 /layout 中,language 无,source 无</li></ul><h3 id="4-markdown-格式-最全"><a href="#4-markdown-格式-最全" class="headerlink" title="4. markdown 格式(最全)"></a>4. markdown 格式(最全)</h3><hr><pre><code>---title: 文章标题date: 2018-09-07 09:25:00author: Littlegagaimg: /source/images/xxx.jpgtop: true（是否置顶）cover: truecoverImg: /images/1.jpgsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories:   - Typora  - Markdowntags:  - Typora  - Markdown---</code></pre>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> blog 配置 </tag>
            
            <tag> blog 写作 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
